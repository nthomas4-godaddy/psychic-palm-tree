name: Convert JS Files to TS

on:
  workflow_dispatch:
    inputs:
      directory:
        description: 'Directory containing JS files to convert'
        required: true
        default: 'src'
  push:
    branches:
      - main
    paths:
      - '**/*.js'

jobs:
  convert-js-to-ts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build the converter
        run: npm run build

      - name: Find JS files to convert
        id: find-js
        run: |
          # Get the directory from input or use default
          DIRECTORY="${{ github.event.inputs.directory || 'src' }}"
          
          # Find all JS files in the specified directory
          JS_FILES=$(find $DIRECTORY -type f -name "*.js" | tr '\n' ' ')
          
          # Store the list of files
          echo "js_files=$JS_FILES" >> $GITHUB_OUTPUT
          
          # Count files for later checks
          FILES_COUNT=$(echo $JS_FILES | wc -w | xargs)
          echo "files_count=$FILES_COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $FILES_COUNT JavaScript files in $DIRECTORY directory"

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create new branch
        run: |
          BRANCH=feature/js-to-ts-conversion-$(date +%s)
          git checkout -b $BRANCH
          echo "BRANCH_NAME=$BRANCH" >> $GITHUB_ENV

      - name: Convert JS files to TS
        id: convert
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Process each JavaScript file
          PROCESSED_FILES=0
          SUCCESSFUL_CONVERSIONS=0
          
          for file in ${{ steps.find-js.outputs.js_files }}; do
            echo "Converting $file to TypeScript..."
            if node dist/converter.js "$file"; then
              SUCCESSFUL_CONVERSIONS=$((SUCCESSFUL_CONVERSIONS + 1))
              
              # Add both the original JS file and the new TS file to git
              git add "$file" "${file%.js}.ts"
            else
              echo "Conversion failed for $file"
            fi
            PROCESSED_FILES=$((PROCESSED_FILES + 1))
          done
          
          echo "Processed $PROCESSED_FILES files, successfully converted $SUCCESSFUL_CONVERSIONS"
          echo "successful_count=$SUCCESSFUL_CONVERSIONS" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          if [ ${{ steps.convert.outputs.successful_count }} -gt 0 ]; then
            git commit -m "feat: convert JavaScript files to TypeScript"
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "No successful conversions, skipping commit"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: Push changes
        if: env.CHANGES_MADE == 'true'
        run: |
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: env.CHANGES_MADE == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE="feat: Convert JavaScript files to TypeScript"
          
          # Create file list for PR body
          FILE_LIST=""
          for file in ${{ steps.find-js.outputs.js_files }}; do 
            FILE_LIST="${FILE_LIST}- ${file} -> ${file%.js}.ts\n"
          done
          
          # Use simple PR body to avoid YAML issues
          PR_BODY="This PR automatically converts JavaScript files to TypeScript using the JS-to-TS converter."
          
          # Add converted files directly with gh pr create command
          
          # First create the PR with a simple message
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head ${{ env.BRANCH_NAME }}
            
          # Get the PR number from the new branch
          PR_NUMBER=$(gh pr list --head ${{ env.BRANCH_NAME }} --json number -q '.[0].number')
          
          # Then add a comment with the file list
          if [ -n "$PR_NUMBER" ]; then
            # Generate file list
            COMMENT_BODY="### Converted Files:\n"
            for file in ${{ steps.find-js.outputs.js_files }}; do
              COMMENT_BODY="${COMMENT_BODY}\n- ${file} â†’ ${file%.js}.ts"
            done
            
            # Add comment with file list
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          fi
